@page "/"
@using raft_DJPhelps1
@rendermode InteractiveServer

<div class="row">
    <div class="col">
        <label>Network Delay</label>
        <input type="range" min="200" max="500" step="10" style="width:40%" @bind-value="NetworkDelay" />
        <label>Time Scale</label>
        <input type="range" min="20" max="50" step="5" style="width:40%" @bind-value="TimeoutMultiplier" />
        <button style="border:2px solid darkslategray">These don't work</button>
    </div>

    <div class="col">
        <button style="border:3px solid black" padding="5px"
        @onclick="GetNodeStates">
            Get an update from the nodes.</button>
    </div>

    <div class="col">
        <label>Node </label>
        <input @bind-value="@nodeindex" type="range" min="0" max="2" step="1"/>
        <input @bind-value="@AddVal" type="range" min="-10" max="10" step="1" />
        <p>request add @AddVal to Node @nodeindex</p>
        <button @onclick="SendAddRequest">Send request</button>
        <button style="border:2px solid red" @onclick="HaltThisNode">Stop this node</button>
    </div>
</div>

<div class="row">
    @foreach (var node in NodeDeeetsList.Values)
    {
        
        <div class="col">
            <p>Node: @node.Node_Id</p>
            <p>Current Leader: @node.CurrentTermLeader</p>
            <p>State: @node.State  |  Term: @node.Term  |  Status: @node.Status</p>
            <p>Commit index: @node.LogIndex  |  Next index: @node.NextIndex</p>
            <p>Timeout Scalar: @node.ElectionTimeout | State Machine: @node.StateMachineVal</p>
            <p>Heartbeat time: @node.Heartbeat  |  Election time: @node.ElectionTimer</p>
            <div class="col" style="border:2px dotted darkslategray">
                @if(node.Log.Count > 0){
                    @foreach(var logItem in node.Log){
                        <p>Log: @logItem.Key || Action: @logItem.Value.COMMAND @logItem.Value.VALUE</p>
                        <p>Term: @logItem.Value.TERM</p>
                        <p>Committed? @logItem.Value.ISCOMMITTED  |  Valid? @logItem.Value.ISVALID</p>
                    }
                }
            </div>
        </div>
    }

</div>

@code{
    int nodeindex;
    int AddVal;
    int NetworkDelay;
    int TimeoutMultiplier;
    string[]? urls = new string[3];
    Timer? timer;
    Dictionary<int,NodeData> NodeDeeetsList = new Dictionary<int,NodeData>();
    Dictionary<int,NetworkClusterNode> nodes = new();

    private async void SendAddRequest(MouseEventArgs e){
        await nodes[nodeindex].RequestAdd(AddVal);
    }

    private async void HaltThisNode(MouseEventArgs e){
        await nodes[nodeindex].ToggleOperation(false);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        urls = Environment.GetEnvironmentVariable("NODE_URLS")?.Split(',') ?? throw new Exception("Node Urls not set");
        // TimeoutMultiplier = Int32.Parse(Environment.GetEnvironmentVariable("NODE_INTERVAL_SCALAR"));
        nodes = new();

        nodes.Add(0, new NetworkClusterNode(Guid.NewGuid(), urls[0]));
        nodes.Add(1, new NetworkClusterNode(Guid.NewGuid(), urls[1]));
        nodes.Add(2, new NetworkClusterNode(Guid.NewGuid(), urls[2]));

        timer = new Timer(async _ =>
        {
            await InvokeAsync(StateHasChanged);
        }, null, 0, 500);
    }

    private async void UpdateNodeTimeouts(MouseEventArgs e)
    {
        if(nodes is not null)
            foreach(var n in nodes){
                await n.Value.RequestTimeclockChange(NetworkDelay, TimeoutMultiplier);
            }
    }

    public async Task GetAllData(){
        int i = 1;
        foreach(var node in nodes.Values){
            NodeDeeetsList[i] = await node.RequestNodeHealth() ?? new NodeData(
             Node_Id : Guid.Empty,
             NextIndex : 0,
             LogIndex : 0,
             CurrentTermLeader : Guid.Empty,
             ElectionTimeout : -1,
             ElectionTimer : -1,
             Heartbeat : -1,
             Log : new(),
             State : "down",
             Status : false,
             Term : -1,
             TimeoutMultiplier : 0,
             StateMachineVal: 0 );
             
            i++;
        }
    }

    public async void GetNodeStates(){
        await GetAllData();

        timer?.Dispose();

        timer = new Timer(_ =>
                    {
                        InvokeAsync(GetAllData);
                        InvokeAsync(StateHasChanged);
                    }, null, 0, 500);
    }

    private async void ToggleSim(){
        if (nodes is not null)
        {
            foreach(var n in nodes){
                await n.Value.ToggleOperation(true);

                if (n.Value.StartFlag)
                    timer = new Timer(_ =>
                    {
                        InvokeAsync(StateHasChanged);
                    }, null, 0, 500);
                else
                    timer?.Dispose();
            }
        }
    }
}