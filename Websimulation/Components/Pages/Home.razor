@page "/"
@rendermode InteractiveServer
@using MudBlazor
@using System.ComponentModel
@using raft_DJPhelps1

<PageTitle>Home</PageTitle>
@* 
<MudSlider Value="@NetworkDelay" ValueLabel="true" Min="0" Max="50" Style="width:50%" @onchange=ChangeNetworkDelay>NetworkDelay (ms)</MudSlider>
<MudSlider Value="@TimeoutMultiplier" ValueLabel="true" Min="5.0" Max="20.0" Style="width:50%" @onchange=ChangeTimeoutMultiplier>Timeout</MudSlider>
<MudSlider Value="@ProgressBarSlider" ValueLabel="true" Min="0" Max="1" Step="0.01" Style="width:50%" @onchange=ProgressBarTest>Slider</MudSlider>

<MudProgressLinear Value="@ProgressBarSlider" Min="0" Max="1" Class="my-7"></MudProgressLinear>

Going to replace these with different sliders and progress bars.
*@



<button @onclick="StartSim">Start</button>
<button @onclick="Stop">Stop</button>

<div class="row">
    @foreach(var node in simulationNodes)
    {
        var maxHeartbeat = node.InnerNode.Heartbeat*node.InnerNode.TimeoutMultiplier;
        var percentHeartbeat = (int)(Math.Abs((maxHeartbeat - node.NodeHeartbeatProgress) / maxHeartbeat));
        var maxElectionTimer = node.InnerNode.ElectionTimerMax * node.InnerNode.TimeoutMultiplier;
        var percentElectionTimer = (int)(Math.Abs((maxElectionTimer-node.NodeHeartbeatProgress) / maxElectionTimer));

        <div class="p-3 col-4">
            <div class="border p-3 rounded-3">
                <div>
                    <div class="row">
                        @node.Id
                        @node.Term
                        @node.InnerNode.State
                        <br />
                        Current leader is @node.InnerNode.CurrentLeader
                        @if(node.InnerNode.State == "Leader"){
                            <MudProgressLinear Class="my-7"
                            Size="Size.Medium"
                            Color="Color.Success"
                            Min="0" Max="1"
                            Value="@percentHeartbeat">
                                <MudText>
                                    Heartbeat:
                                </MudText>
                            </MudProgressLinear>
                        }
                        else{

                            <MudProgressLinear Class="my-7"
                            Size="Size.Medium" 
                            Color="Color.Warning"
                            Value="@percentElectionTimer">
                                <MudText>
                                    Election timer:
                                </MudText>
                            </MudProgressLinear>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

</div>


@code {
    List<SimulationNode> simulationNodes = new List<SimulationNode>();
    private Timer? timer;
    bool StartFlag = false;
    int NetworkDelay = 0;
    int TimeoutMultiplier = 10;
    float ProgressBarSlider = 0.2f;

    public void ProgressBarTest(){
        InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    Node node1;
    Node node2;
    Node node3;

    SimulationNode simnode1;
    SimulationNode simnode2;
    SimulationNode simnode3;

    public void UpdateNodeTimeoutsGraphic(){
        foreach(var node in simulationNodes){
            node.NodeElectionProgress -= 40;
            node.NodeHeartbeatProgress -= 40;
        }    
    }

    void Stop(){
        foreach(var n in simulationNodes){
            if (n == null)
                return;

            n.Stop();
        }

        timer?.Dispose();
    }

    public void Refresh(){
        StateHasChanged();
    }

    public void ChangeNetworkDelay(){
        foreach(var node in simulationNodes){
            node.InnerNode.InternalDelay = NetworkDelay;
        }
        StateHasChanged();
        UpdateTimer();
    }
    public void ChangeTimeoutMultiplier(){
        foreach(var node in simulationNodes){
            node.InnerNode.TimeoutMultiplier = TimeoutMultiplier;
        }
        StateHasChanged();
        UpdateTimer();
    }

    public void UpdateTimer(){
        timer?.Dispose();
        timer = new Timer(_ =>
        {
            InvokeAsync(StateHasChanged); // Any time the slider changes, we need to also change the timer.
            UpdateNodeTimeoutsGraphic();
        }, null, 0, 40);
    }

    void StartSim(){
        if(!StartFlag)
        {
            StartFlag = true;

            node1 = new Node();
            node2 = new Node();
            node3 = new Node();

            node1.TimeoutMultiplier = TimeoutMultiplier;
            node2.TimeoutMultiplier = TimeoutMultiplier;
            node3.TimeoutMultiplier = TimeoutMultiplier;

            simnode1 = new SimulationNode(node1);
            simnode2 = new SimulationNode(node2);
            simnode3 = new SimulationNode(node3);

            // simnode1.RefreshActors += Refresh;
            // simnode2.RefreshActors += Refresh;
            // simnode3.RefreshActors += Refresh;

            node1.Nodes.Add(simnode2.Id, simnode2);
            node1.Nodes.Add(simnode3.Id, simnode3);

            node2.Nodes.Add(simnode1.Id, simnode1);
            node2.Nodes.Add(simnode3.Id, simnode3);

            node3.Nodes.Add(simnode1.Id, simnode1);
            node3.Nodes.Add(simnode2.Id, simnode2);

            simulationNodes.Add(simnode1);
            simulationNodes.Add(simnode2);
            simulationNodes.Add(simnode3);

            StateHasChanged();

            timer = new Timer(_ =>
            {
                UpdateNodeTimeoutsGraphic();
                InvokeAsync(StateHasChanged); // Needed to refresh things periodically
            }, null, 0, 40);

            foreach(var n in simulationNodes){
                n.Start();
            }
        }
    }


}
